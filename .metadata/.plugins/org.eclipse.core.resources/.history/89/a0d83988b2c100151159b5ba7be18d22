package com.MyViewGroup;

import java.util.ArrayList;
import java.util.List;

import com.example.puzzle.R;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.util.AttributeSet;
import android.util.Log;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.RelativeLayout;

public class MyRelativeLayout extends RelativeLayout
{
	/*
	 * 对外扩展属性 由用户进行指定 
	 * 但是需要指定默认值 因为有可能用户并没有指定
	 */
	private int n = 2;
	private int maring = 7;
	private Bitmap bit = BitmapFactory.decodeResource(getResources(), R.drawable.a);
	
	public MyRelativeLayout(Context context, AttributeSet attrs, int defStyle)
	{
		super(context, attrs, defStyle);
	}

	public MyRelativeLayout(Context context, AttributeSet attrs)
	{
		super(context, attrs);
	}

	public MyRelativeLayout(Context context)
	{
		super(context);
	}
	
	/* (non-Javadoc)
	 * @see android.widget.RelativeLayout#onMeasure(int, int)
	 */
	@Override
	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
	{
		super.onMeasure(widthMeasureSpec, heightMeasureSpec);
		/*
		 * 因为最终拼图父容器是正方形
		 * 但是用户有可能竖屏或者横屏
		 * 所以取两者最小值来做整体正方形的长度
		 */
		int value = Math.min(getMeasuredHeight(), getMeasuredWidth());
		setMeasuredDimension(value, value);//设置成正方形
		int oWitht = (value-getPaddingLeft()-getPaddingRight()-(n-1)*maring)/n;//计算出每个ImageView的宽度=高度
		
		/*
		 * 创建ImageView 显示每个拼图碎片
		 */
		for (int i = 0; i < n*n; i++)
		{
			ImageView imageView = new ImageView(getContext());
			imageView.setId(i+1);//设置每个ImageView的id
			imageView.setTag(i);
			
			RelativeLayout.LayoutParams params = new LayoutParams(oWitht, oWitht);//定义每个子视图的容器大小
			
			if(i>=n)
			{
				//在非第一行，开始对当前的ImageView设定布局位置
				
				/*
				 * RelativeLayout指定当前的ImageView的布局位置
				 * 参数1：位置
				 * 参数2：相对于那个View指定的
				 */
				params.addRule(RelativeLayout.BELOW, i-n+1);
				params.topMargin = maring;//间距
			}
			
			if(i%n!=0)
			{
				//在非第一列 开始对当前的ImageView设定布局位置
				params.addRule(RelativeLayout.RIGHT_OF, i);
				params.leftMargin = maring;
			}
			
			//最后只剩下下标是0的ImageView没有被指定 但是无需指定 因为他将默认在容器的左上角
			imageView.setImageBitmap(getBitmap().get(i));
			imageView.setScaleType(ScaleType.FIT_XY);
			addView(imageView, params);//把当前的ImageView添加this容器中
		}
		
	}
	
	private  List<Bitmap>  getBitmap()
	{
		List<Bitmap> bits = new ArrayList<Bitmap>();
		int width = bit.getWidth()/n;
		int height = bit.getHeight()/n;
		
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < n; j++)
			{
				Bitmap bit = Bitmap.createBitmap(this.bit, j*width, i*height, width, height);
				bits.add(bit);
			}
		}
		
		return bits;
	}

}
